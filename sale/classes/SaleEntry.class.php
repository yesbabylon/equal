<?php
/*
    This file is part of Symbiose Community Edition <https://github.com/yesbabylon/symbiose>
    Some Rights Reserved, Yesbabylon SRL, 2020-2024
    Licensed under GNU AGPL 3 license <http://www.gnu.org/licenses/>
*/
namespace sale;

use eQual;
use equal\orm\Model;
use sale\price\Price;
use sale\price\PriceList;
use sale\receivable\Receivable;
use sale\receivable\ReceivablesQueue;

class SaleEntry extends Model {

    public static function getDescription() {
        return "Sale entries are used to describe sales (the action of selling a good or a service).
            In addition, this class is meant to be used as an OOP interface for entities meant to describe something that can be sold.";
    }

    public static function getColumns() {

        return [
            'object_class' => [
                'type'              => 'string',
                'description'       => 'Class name of the object.',
                'help'              => 'Sale entries can to extended by other classes to enrich logic behavior. This field is used to store the class name of the object.',
                'default'           => 'sale\SaleEntry'
            ],

            'code' => [
                'type'              => 'computed',
                'result_type'       => 'string',
                'description'       => 'Entry code.',
                'function'          => 'calcCode'
            ],

            'description' => [
                'type'              => 'string',
                'description'       => 'Description of the entry.',
                'dependents'        => ['name']
            ],

            'name' => [
                'type'              => 'computed',
                'result_type'       => 'string',
                'description'       => 'Short readable identifier of the entry.',
                'function'          => 'calcName',
                'store'             => true
            ],

            'date'       => [
                'type'           => 'datetime',
                'description'    => 'Date of the entry.',
                'default'        => function() { return time(); },
            ],

            'detailed_description' => [
                'type'              => 'string',
                'usage'             => 'text/plain',
                'description'       => 'Detailed description of the entry (if relevant).'
            ],

            'receivable_queue_id' => [
                'type'            => 'many2one',
                'foreign_object'  => 'sale\receivable\ReceivablesQueue',
                'description'     => 'Receivable queue to use for receivable generated by the entry.',
                'help'            => 'Depending on the type of Sale Entry, the receivable queue might be specified by the logic, or left to be picked amongst related Customer queues.',
                'domain'          => ['customer_id', '=', 'object.customer_id']
            ],

            /*
            'invoice_group' => [
                'type'              => 'string',
                'description'       => 'Arbitrary name for grouping sales when invoicing (might be left unset).',
            ],
            */

            'invoice_group' => [
                'type'              => 'computed',
                'result_type'       => 'string',
                'function'          => 'calcInvoiceGroup',
                'store'             => true,
                'description'       => 'Arbitrary name for grouping sales when invoicing (might be left unset).',
            ],

            'has_receivable' => [
                'type'              => 'boolean',
                'description'       => 'The entry is linked to a receivable entry.',
                'default'           => false
            ],

            'receivable_id' => [
                'type'              => 'many2one',
                'foreign_object'    => 'sale\receivable\Receivable',
                'description'       => 'The receivable entry the sale entry is linked to.',
                'visible'           => ['has_receivable', '=', true]
            ],

            'is_billable' => [
                'type'              => 'boolean',
                'description'       => 'Flag telling if the entry can be billed to the customer.',
                'help'              => 'Under certain circumstances, a task is performed for the organisation itself, or relates to a customer but cannot be billed (from a commercial perspective). Most of the time this cannot be known in advance and this flag is intended to be set manually.',
                'default'           => true,
                'dependents'        => ['total']
            ],

            'is_internal' => [
                'type'              => 'boolean',
                'default'           => false,
                'description'       => 'Flag telling if the entry relates to the organisation itself.',
                'help'              => 'Under certain circumstances, a task is performed for the organisation itself and must be considered as internal (might not be invoiced).'
            ],

            'customer_id' => [
                'type'              => 'many2one',
                'foreign_object'    => 'sale\customer\Customer',
                'description'       => 'The Customer to who refers the item.'
            ],

            'product_id'=> [
                'type'              => 'many2one',
                'foreign_object'    => 'sale\catalog\Product',
                'description'       => 'Product of the catalog sale.'
            ],

            'price_id'=> [
                'type'              => 'many2one',
                'foreign_object'    => 'sale\price\Price',
                'description'       => 'Price of the sale.',
                'dependents'        => ['unit_price', 'vat_rate']
            ],

            'unit_price' => [
                'type'              => 'computed',
                'result_type'       => 'float',
                'usage'             => 'amount/money:4',
                'description'       => 'Unit price of the product related to the entry.',
                'relation'          => ['price_id' => ['price']],
                'store'             => true,
                'readonly'          => true
            ],

            'vat_rate' => [
                'type'              => 'computed',
                'result_type'       => 'float',
                'usage'             => 'amount/rate',
                'description'       => 'VAT rate to be applied.',
                'relation'          => ['price_id' => ['vat_rate']],
                'store'             => true,
                'readonly'          => true
            ],

            'qty' => [
                'type'              => 'float',
                'description'       => 'Quantity of product.',
                'default'           => 1.0
            ],

            'free_qty' => [
                'type'              => 'integer',
                'description'       => 'Free quantity of product, if any.',
                'default'           => 0
            ],

            'discount' => [
                'type'              => 'float',
                'usage'             => 'amount/rate',
                'description'       => 'Total amount of discount to apply, if any.',
                'default'           => 0.0
            ],

            'status' => [
                'type'              => 'string',
                'selection'         => [
                    'pending',
                    'ready',
                    'validated',
                    'billed'
                ],
                'description'       => 'Status of the sale entry.',
                'default'           => 'pending'
            ],

            'total' => [
                'type'              => 'computed',
                'result_type'       => 'float',
                'usage'             => 'amount/money:4',
                'function'          => 'calcTotal',
                'store'             => true,
                'description'       => 'Total tax-excluded price of the entry (computed).'
            ]

        ];
    }

    public static function calcInvoiceGroup($self) {
        $result = [];
        $self->read(['project_id' => ['name']]);
        foreach($self as $id => $entry) {
            $result[$id] = $entry['project_id']['name'];
        }
        return $result;
    }

    public static function getPolicies(): array {
        return [
            'ready-for-validation' => [
                'description' => 'Verifies that the sale entry can enter validation process (Used in timetrack\TimeEntry).',
                'function'    => 'policyReadyForValidation'
            ],
            'billable' => [
                'description' => 'Verifies that sale entry holds all information required for billing.',
                'function'    => 'policyBillable'
            ]
        ];
    }

    public static function getActions() {
        return [
            'create_receivable' => [
                'description'   => "Sets the validated flag to true.",
                'policies'      => [],
                'function'      => 'doCreateReceivable'
            ],
        ];
    }

    /**
     * Retrieves the first ReceivablesQueue associated with sale entry, or create a new one if there are none.
    */
    private static function computeReceivablesQueueId($id) {
        $receivables_queue_id = 0;

        $saleEntry = self::id($id)->read(['receivable_queue_id', 'customer_id'])->first();

        if($saleEntry['receivable_queue_id']) {
            $receivables_queue_id = $saleEntry['receivable_queue_id'];
        }
        else {
            $receivablesQueue = ReceivablesQueue::search(['customer_id', '=', $saleEntry['customer_id']])
                ->read(['id'])
                ->first();

            if(!$receivablesQueue) {
                $receivablesQueue = ReceivablesQueue::create([
                        'customer_id' => $saleEntry['customer_id']
                    ])
                    ->read(['id'])
                    ->first();
            }

            if($receivablesQueue) {
                $receivables_queue_id = $receivablesQueue['id'];
            }
        }

        return $receivables_queue_id;
    }

    /**
     * Method to override when extending class, by default no validation process for sale entry
     *
     * @param $self
     * @return array
     */
    public static function policyReadyForValidation($self): array {
        $result = [];
        $self->read(['id']);
        foreach($self as $id => $entry) {
            $result[$id] = false;
        }
        return $result;
    }

    public static function policyBillable($self): array {
        $result = [];
        $self->read(['status', 'is_internal', 'customer_id', 'product_id', 'price_id', 'unit_price', 'qty', 'is_billable']);
        foreach($self as $id => $entry) {
            // #memo - a sale entry can be set to 'billed' status even if not billable (to mark the entry as processed when there is no invoicing)
            if( $entry['status'] !== 'validated' ||
                (!$entry['is_internal'] && (!isset($entry['customer_id']) || !isset($entry['product_id']) || !isset($entry['price_id'])))
            ) {
                $result[$id] = false;
            }
        }

        return $result;
    }

    public static function doCreateReceivable($self) {
        $self->read(['id', 'is_internal', 'date', 'invoice_group']);
        foreach($self as $id => $entry) {
            if($entry['is_internal']) {
                continue;
            }
            // if a receivable has been previously created remove it
            Receivable::search(['sale_entry_id', '=', $entry['id']])->delete(true);
            // retrieve applicable receivablesQueue
            $receivables_queue_id = self::computeReceivablesQueueId($id);
            // create a new receivable assigned to this entry
            $receivable = Receivable::create([
                    'receivables_queue_id' => $receivables_queue_id,
                    'sale_entry_id'        => $id,
                    'date'                 => $entry['date'],
                    'invoice_group'        => $entry['invoice_group']
                ])
                ->read(['id'])
                ->first();

            self::id($id)
                ->update([
                    'has_receivable' => true,
                    'receivable_id'  => $receivable['id']
                ]);
        }
    }

    public static function getWorkflow() {
        return [
            'pending' => [
                'description' => 'Sale entry is still a draft and waiting to be completed.',
                'icon' => 'edit',
                'transitions' => [
                    'submit' => [
                        'description' => 'Sets sale entry as ready for validation.',
                        'help' => 'Can only be applied if sale\\SaleEntry has a validation process.',
                        'policies' => [
                            'ready-for-validation',
                        ],
                        'status' => 'ready',
                    ],
                    'validate' => [
                        'description' => 'Validate sale entry.',
                        'status' => 'validated'
                    ],
                ],
            ],
            'ready' => [
                'description' => 'Sale entry submitted for approval.',
                'help' => 'This status can be used by children of this class to check the completed specific information (Used by timetrack\\TimeEntry).',
                'icon' => 'pending',
                'transitions' => [
                    'refuse' => [
                        'description' => 'Refuse sale entry, sets its status back to pending.',
                        'status' => 'pending',
                    ],
                    'validate' => [
                        'description' => 'Validate sale entry.',
                        'status' => 'validated',
                    ],
                ],
            ],
            'validated' => [
                'description' => 'Sale entry validated, now sale information must be completed to bill the sale entry.',
                'help' => 'To bill the sale entry the sale information (product, price, unit price) must be completed.',
                'icon' => 'check_circle',
                'transitions' => [
                    'bill' => [
                        'description' => 'Create receivable, from sale entry, who will be invoiced to the customer.',
                        'onbefore' => 'doCreateReceivable',
                        'policies' => [
                            'billable',
                        ],
                        'status' => 'billed',
                    ],
                ],
            ],
            'billed' => [
                'description' => 'A receivable was generated, it can be invoiced to the customer.',
                'help' => 'Sale entry life cycle is over, its data cannot be modified.',
                'icon' => 'receipt_long',
                'transitions' => [
                ],
            ],
        ];
    }

    public static function onchange($event, $values) {
        $result = [];

        if(isset($event['product_id'])) {
            $price_lists_ids = PriceList::search([
                    [
                        ['date_from', '<=', time()],
                        ['date_to', '>=', time()],
                        ['status', '=', 'published'],
                    ]
                ])
                ->ids();

            $result['price_id'] = Price::search([
                    ['product_id', '=', $event['product_id']],
                    ['price_list_id', 'in', $price_lists_ids]
                ])
                ->read(['id', 'name', 'price'])
                ->first();

            if(isset($result['price_id']['price'])) {
                $result['unit_price'] = $result['price_id']['price'];
            }
        }

        return $result;
    }

    public static function calcCode($self) {
        $result = [];
        foreach($self->ids() as $id) {
            $result[$id] = str_pad($id, 5, '0', STR_PAD_LEFT);
        }
        return $result;
    }

    public static function calcName($self) {
        $result = [];
        $self->read(['code', 'description']);
        foreach($self as $id => $entry) {
            $result[$id] = '['.$entry['code'].']';
            if(isset($entry['description'])
                && strlen($entry['description']) > 0) {
                $result[$id] .= ' '.$entry['description'];
            }
        }
        return $result;
    }

    public static function calcTotal($self) {
        $result = [];
        // #memo - qty is based on billable_duration
        $self->read(['is_billable', 'qty', 'unit_price', 'free_qty', 'discount']);
        foreach($self as $id => $entry) {
            if(!$entry['is_billable']) {
                $result[$id] = 0;
                continue;
            }
            // #todo - round to the sale price precision, from settings
            $result[$id] = round($entry['unit_price'] * (1.0 - $entry['discount']) * ($entry['qty'] - $entry['free_qty']), 4);
        }
        return $result;
    }

    public static function canupdate($self, $values) {
        $self->read(['has_receivable']);
        foreach($self as $sale_entry) {
            if($sale_entry['has_receivable']) {
                return ['has_receivable' => ['non_editable' => 'Billed sale entry cannot be modified.']];
            }
        }

        return parent::canupdate($self, $values);
    }
}
